{
  "name": "file-tree",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-accordion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [
    "button",
    "scroll-area"
  ],
  "files": [
    {
      "path": "ui/file-tree.tsx",
      "content": "/*\n * This file was generated by ShipKit.\n * Learn more at https://shipkit.io\n */\n\n\"use client\";\n\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { FileIcon, FolderIcon, FolderOpenIcon } from \"lucide-react\";\nimport React, {\n\tcreateContext,\n\tforwardRef,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\ntype TreeViewElement = {\n\tid: string;\n\tname: string;\n\tisSelectable?: boolean;\n\tchildren?: TreeViewElement[];\n};\n\ntype TreeContextProps = {\n\tselectedId: string | undefined;\n\texpandedItems: string[] | undefined;\n\tindicator: boolean;\n\thandleExpand: (id: string) => void;\n\tselectItem: (id: string) => void;\n\tsetExpandedItems?: React.Dispatch<React.SetStateAction<string[] | undefined>>;\n\topenIcon?: React.ReactNode;\n\tcloseIcon?: React.ReactNode;\n\tdirection: \"rtl\" | \"ltr\";\n};\n\nconst TreeContext = createContext<TreeContextProps | null>(null);\n\nconst useTree = () => {\n\tconst context = useContext(TreeContext);\n\tif (!context) {\n\t\tthrow new Error(\"useTree must be used within a TreeProvider\");\n\t}\n\treturn context;\n};\n\ninterface TreeViewComponentProps extends React.HTMLAttributes<HTMLDivElement> { }\n\ntype Direction = \"rtl\" | \"ltr\" | undefined;\n\ntype TreeViewProps = {\n\tinitialSelectedId?: string;\n\tindicator?: boolean;\n\telements?: TreeViewElement[];\n\tinitialExpandedItems?: string[];\n\topenIcon?: React.ReactNode;\n\tcloseIcon?: React.ReactNode;\n} & TreeViewComponentProps;\n\nconst Tree = forwardRef<HTMLDivElement, TreeViewProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\telements,\n\t\t\tinitialSelectedId,\n\t\t\tinitialExpandedItems,\n\t\t\tchildren,\n\t\t\tindicator = true,\n\t\t\topenIcon,\n\t\t\tcloseIcon,\n\t\t\tdir,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst [selectedId, setSelectedId] = useState<string | undefined>(\n\t\t\tinitialSelectedId,\n\t\t);\n\t\tconst [expandedItems, setExpandedItems] = useState<string[] | undefined>(\n\t\t\tinitialExpandedItems,\n\t\t);\n\n\t\tconst selectItem = useCallback((id: string) => {\n\t\t\tsetSelectedId(id);\n\t\t}, []);\n\n\t\tconst handleExpand = useCallback((id: string) => {\n\t\t\tsetExpandedItems((prev) => {\n\t\t\t\tif (prev?.includes(id)) {\n\t\t\t\t\treturn prev.filter((item) => item !== id);\n\t\t\t\t}\n\t\t\t\treturn [...(prev ?? []), id];\n\t\t\t});\n\t\t}, []);\n\n\t\tconst expandSpecificTargetedElements = useCallback(\n\t\t\t(elements?: TreeViewElement[], selectId?: string) => {\n\t\t\t\tif (!elements || !selectId) return;\n\t\t\t\tconst findParent = (\n\t\t\t\t\tcurrentElement: TreeViewElement,\n\t\t\t\t\tcurrentPath: string[] = [],\n\t\t\t\t) => {\n\t\t\t\t\tconst isSelectable = currentElement.isSelectable ?? true;\n\t\t\t\t\tconst newPath = [...currentPath, currentElement.id];\n\t\t\t\t\tif (currentElement.id === selectId) {\n\t\t\t\t\t\tif (isSelectable) {\n\t\t\t\t\t\t\tsetExpandedItems((prev) => [...(prev ?? []), ...newPath]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (newPath.includes(currentElement.id)) {\n\t\t\t\t\t\t\t\tnewPath.pop();\n\t\t\t\t\t\t\t\tsetExpandedItems((prev) => [...(prev ?? []), ...newPath]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tisSelectable &&\n\t\t\t\t\t\tcurrentElement.children &&\n\t\t\t\t\t\tcurrentElement.children.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tcurrentElement.children.forEach((child) => {\n\t\t\t\t\t\t\tfindParent(child, newPath);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\telements.forEach((element) => {\n\t\t\t\t\tfindParent(element);\n\t\t\t\t});\n\t\t\t},\n\t\t\t[],\n\t\t);\n\n\t\tuseEffect(() => {\n\t\t\tif (initialSelectedId) {\n\t\t\t\texpandSpecificTargetedElements(elements, initialSelectedId);\n\t\t\t}\n\t\t}, [initialSelectedId, elements]);\n\n\t\tconst direction = dir === \"rtl\" ? \"rtl\" : \"ltr\";\n\n\t\treturn (\n\t\t\t<TreeContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tselectedId,\n\t\t\t\t\texpandedItems,\n\t\t\t\t\thandleExpand,\n\t\t\t\t\tselectItem,\n\t\t\t\t\tsetExpandedItems,\n\t\t\t\t\tindicator,\n\t\t\t\t\topenIcon,\n\t\t\t\t\tcloseIcon,\n\t\t\t\t\tdirection,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className={cn(\"size-full\", className)}>\n\t\t\t\t\t<ScrollArea\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tclassName=\"relative h-full px-2\"\n\t\t\t\t\t\tdir={dir as Direction}\n\t\t\t\t\t>\n\t\t\t\t\t\t<AccordionPrimitive.Root\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\ttype=\"multiple\"\n\t\t\t\t\t\t\tdefaultValue={expandedItems}\n\t\t\t\t\t\t\tvalue={expandedItems}\n\t\t\t\t\t\t\tclassName=\"flex flex-col gap-1\"\n\t\t\t\t\t\t\tonValueChange={(value) =>\n\t\t\t\t\t\t\t\tsetExpandedItems((prev) => [...(prev ?? []), value[0]])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdir={dir as Direction}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</AccordionPrimitive.Root>\n\t\t\t\t\t</ScrollArea>\n\t\t\t\t</div>\n\t\t\t</TreeContext.Provider>\n\t\t);\n\t},\n);\n\nTree.displayName = \"Tree\";\n\nconst TreeIndicator = forwardRef<\n\tHTMLDivElement,\n\tReact.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n\tconst { direction } = useTree();\n\n\treturn (\n\t\t<div\n\t\t\tdir={direction}\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\t\"absolute left-1.5 h-full w-px rounded-md bg-muted py-3 duration-300 ease-in-out hover:bg-slate-300 rtl:right-1.5\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\n\nTreeIndicator.displayName = \"TreeIndicator\";\n\ninterface FolderComponentProps\n\textends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> { }\n\ntype FolderProps = {\n\texpandedItems?: string[];\n\telement: string;\n\tisSelectable?: boolean;\n\tisSelect?: boolean;\n} & FolderComponentProps;\n\nconst Folder = forwardRef<\n\tHTMLDivElement,\n\tFolderProps & React.HTMLAttributes<HTMLDivElement>\n>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\telement,\n\t\t\tvalue,\n\t\t\tisSelectable = true,\n\t\t\tisSelect,\n\t\t\tchildren,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst {\n\t\t\tdirection,\n\t\t\thandleExpand,\n\t\t\texpandedItems,\n\t\t\tindicator,\n\t\t\tsetExpandedItems,\n\t\t\topenIcon,\n\t\t\tcloseIcon,\n\t\t} = useTree();\n\n\t\treturn (\n\t\t\t<AccordionPrimitive.Item\n\t\t\t\t{...props}\n\t\t\t\tvalue={value}\n\t\t\t\tclassName=\"relative h-full overflow-hidden\"\n\t\t\t>\n\t\t\t\t<AccordionPrimitive.Trigger\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t`flex items-center gap-1 rounded-md text-sm`,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"bg-muted rounded-md\": isSelect && isSelectable,\n\t\t\t\t\t\t\t\"cursor-pointer\": isSelectable,\n\t\t\t\t\t\t\t\"cursor-not-allowed opacity-50\": !isSelectable,\n\t\t\t\t\t\t},\n\t\t\t\t\t)}\n\t\t\t\t\tdisabled={!isSelectable}\n\t\t\t\t\tonClick={() => handleExpand(value)}\n\t\t\t\t>\n\t\t\t\t\t{expandedItems?.includes(value)\n\t\t\t\t\t\t? (openIcon ?? <FolderOpenIcon className=\"size-4\" />)\n\t\t\t\t\t\t: (closeIcon ?? <FolderIcon className=\"size-4\" />)}\n\t\t\t\t\t<span>{element}</span>\n\t\t\t\t</AccordionPrimitive.Trigger>\n\t\t\t\t<AccordionPrimitive.Content className=\"relative h-full overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\">\n\t\t\t\t\t{element && indicator && <TreeIndicator aria-hidden=\"true\" />}\n\t\t\t\t\t<AccordionPrimitive.Root\n\t\t\t\t\t\tdir={direction}\n\t\t\t\t\t\ttype=\"multiple\"\n\t\t\t\t\t\tclassName=\"ml-5 flex flex-col gap-1 py-1 rtl:mr-5 \"\n\t\t\t\t\t\tdefaultValue={expandedItems}\n\t\t\t\t\t\tvalue={expandedItems}\n\t\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\t\tsetExpandedItems?.((prev) => [...(prev ?? []), value[0]]);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children}\n\t\t\t\t\t</AccordionPrimitive.Root>\n\t\t\t\t</AccordionPrimitive.Content>\n\t\t\t</AccordionPrimitive.Item>\n\t\t);\n\t},\n);\n\nFolder.displayName = \"Folder\";\n\nconst File = forwardRef<\n\tHTMLButtonElement,\n\t{\n\t\tvalue: string;\n\t\thandleSelect?: (id: string) => void;\n\t\tisSelectable?: boolean;\n\t\tisSelect?: boolean;\n\t\tfileIcon?: React.ReactNode;\n\t} & React.ButtonHTMLAttributes<HTMLButtonElement>\n>(\n\t(\n\t\t{\n\t\t\tvalue,\n\t\t\tclassName,\n\t\t\thandleSelect,\n\t\t\tisSelectable = true,\n\t\t\tisSelect,\n\t\t\tfileIcon,\n\t\t\tchildren,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst { direction, selectedId, selectItem } = useTree();\n\t\tconst isSelected = isSelect ?? selectedId === value;\n\t\treturn (\n\t\t\t<button\n\t\t\t\tref={ref}\n\t\t\t\ttype=\"button\"\n\t\t\t\tdisabled={!isSelectable}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"flex w-fit max-w-full items-center gap-1 rounded-md pr-1 text-sm duration-200 ease-in-out rtl:pl-1 rtl:pr-0\",\n\t\t\t\t\t{\n\t\t\t\t\t\t\"bg-muted\": isSelected && isSelectable,\n\t\t\t\t\t},\n\t\t\t\t\tisSelectable ? \"cursor-pointer\" : \"cursor-not-allowed opacity-50\",\n\t\t\t\t\tdirection === \"rtl\" ? \"rtl\" : \"ltr\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\tonClick={() => selectItem(value)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{fileIcon ?? <FileIcon className=\"size-4\" />}\n\t\t\t\t{children}\n\t\t\t</button>\n\t\t);\n\t},\n);\n\nFile.displayName = \"File\";\n\nconst CollapseButton = forwardRef<\n\tHTMLButtonElement,\n\t{\n\t\telements: TreeViewElement[];\n\t\texpandAll?: boolean;\n\t} & React.HTMLAttributes<HTMLButtonElement>\n>(({ className, elements, expandAll = false, children, ...props }, ref) => {\n\tconst { expandedItems, setExpandedItems } = useTree();\n\n\tconst expendAllTree = useCallback((elements: TreeViewElement[]) => {\n\t\tconst expandTree = (element: TreeViewElement) => {\n\t\t\tconst isSelectable = element.isSelectable ?? true;\n\t\t\tif (isSelectable && element.children && element.children.length > 0) {\n\t\t\t\tsetExpandedItems?.((prev) => [...(prev ?? []), element.id]);\n\t\t\t\telement.children.forEach(expandTree);\n\t\t\t}\n\t\t};\n\n\t\telements.forEach(expandTree);\n\t}, []);\n\n\tconst closeAll = useCallback(() => {\n\t\tsetExpandedItems?.([]);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconsole.log(expandAll);\n\t\tif (expandAll) {\n\t\t\texpendAllTree(elements);\n\t\t}\n\t}, [expandAll]);\n\n\treturn (\n\t\t<Button\n\t\t\tvariant={\"ghost\"}\n\t\t\tclassName=\"absolute bottom-1 right-2 h-8 w-fit p-1\"\n\t\t\tonClick={\n\t\t\t\texpandedItems && expandedItems.length > 0\n\t\t\t\t\t? closeAll\n\t\t\t\t\t: () => expendAllTree(elements)\n\t\t\t}\n\t\t\tref={ref}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t\t<span className=\"sr-only\">Toggle</span>\n\t\t</Button>\n\t);\n});\n\nCollapseButton.displayName = \"CollapseButton\";\n\nexport { CollapseButton, File, Folder, Tree, type TreeViewElement };\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "library": "lacy",
    "theme": "default"
  }
}